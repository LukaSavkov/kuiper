// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: kuiper.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KuiperClient is the client API for Kuiper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KuiperClient interface {
	PutConfigGroup(ctx context.Context, in *PutConfigGroupReq, opts ...grpc.CallOption) (*PutConfigGroupResp, error)
	ApplyConfigGroup(ctx context.Context, in *ApplyConfigGroupReq, opts ...grpc.CallOption) (*ApplyConfigGroupResp, error)
}

type kuiperClient struct {
	cc grpc.ClientConnInterface
}

func NewKuiperClient(cc grpc.ClientConnInterface) KuiperClient {
	return &kuiperClient{cc}
}

func (c *kuiperClient) PutConfigGroup(ctx context.Context, in *PutConfigGroupReq, opts ...grpc.CallOption) (*PutConfigGroupResp, error) {
	out := new(PutConfigGroupResp)
	err := c.cc.Invoke(ctx, "/proto.Kuiper/PutConfigGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kuiperClient) ApplyConfigGroup(ctx context.Context, in *ApplyConfigGroupReq, opts ...grpc.CallOption) (*ApplyConfigGroupResp, error) {
	out := new(ApplyConfigGroupResp)
	err := c.cc.Invoke(ctx, "/proto.Kuiper/ApplyConfigGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KuiperServer is the server API for Kuiper service.
// All implementations must embed UnimplementedKuiperServer
// for forward compatibility
type KuiperServer interface {
	PutConfigGroup(context.Context, *PutConfigGroupReq) (*PutConfigGroupResp, error)
	ApplyConfigGroup(context.Context, *ApplyConfigGroupReq) (*ApplyConfigGroupResp, error)
	mustEmbedUnimplementedKuiperServer()
}

// UnimplementedKuiperServer must be embedded to have forward compatible implementations.
type UnimplementedKuiperServer struct {
}

func (UnimplementedKuiperServer) PutConfigGroup(context.Context, *PutConfigGroupReq) (*PutConfigGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutConfigGroup not implemented")
}
func (UnimplementedKuiperServer) ApplyConfigGroup(context.Context, *ApplyConfigGroupReq) (*ApplyConfigGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyConfigGroup not implemented")
}
func (UnimplementedKuiperServer) mustEmbedUnimplementedKuiperServer() {}

// UnsafeKuiperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KuiperServer will
// result in compilation errors.
type UnsafeKuiperServer interface {
	mustEmbedUnimplementedKuiperServer()
}

func RegisterKuiperServer(s grpc.ServiceRegistrar, srv KuiperServer) {
	s.RegisterService(&Kuiper_ServiceDesc, srv)
}

func _Kuiper_PutConfigGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutConfigGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KuiperServer).PutConfigGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Kuiper/PutConfigGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KuiperServer).PutConfigGroup(ctx, req.(*PutConfigGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kuiper_ApplyConfigGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyConfigGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KuiperServer).ApplyConfigGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Kuiper/ApplyConfigGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KuiperServer).ApplyConfigGroup(ctx, req.(*ApplyConfigGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Kuiper_ServiceDesc is the grpc.ServiceDesc for Kuiper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kuiper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Kuiper",
	HandlerType: (*KuiperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutConfigGroup",
			Handler:    _Kuiper_PutConfigGroup_Handler,
		},
		{
			MethodName: "ApplyConfigGroup",
			Handler:    _Kuiper_ApplyConfigGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kuiper.proto",
}
